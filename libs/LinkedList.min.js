// LinkedList.js copyright Matthew Parke 2013
!function(t){function n(t,n){this._id="number"==typeof t?t:null,this._data=n||null,this.next=null,this.prev=null}function e(){this.start=new n,this.end=new n,this.start.next=this.end,this.start.prev=null,this.end.prev=this.start,this.end.next=null,this._idCounter=0,this._numNodes=0}n.prototype={id:function(t){if(null===t||void 0===t)return this._id;if("number"!=typeof t)throw new Error("Id must be an integer.");this._id=t},data:function(t){return null===t||void 0===t?this._data:(this._data=t,void 0)},hasNext:function(){return null!==this.next?null!==this.next.id():!1},hasPrev:function(){return null!==this.prev?null!==this.prev.id():!1}},e.prototype={insertBefore:function(t,e){var i=new n(this._idCounter,e);i.next=t,i.prev=t.prev,t.prev.next=i,t.prev=i,++this._idCounter,++this._numNodes},addLast:function(t){this.insertBefore(this.end,t)},add:function(t){this.addLast(t)},getFirst:function(){return 0===this._numNodes?null:this.start.next},getLast:function(){return 0===this._numNodes?null:this.end.prev},size:function(){return this._numNodes},getFromFirst:function(t){var n=0,e=this.start.next;if(t>=0)for(;t>n&&null!==e;)e=e.next,++n;else e=null;if(null===e)throw"Index out of bounds.";return e},get:function(t){var n=null;return n=0===t?this.getFirst():t===this._numNodes-1?this.getLast():this.getFromFirst(t)},remove:function(t){return t.prev.next=t.next,t.next.prev=t.prev,--this._numNodes,t},removeFirst:function(){var t=null;return this._numNodes>0&&(t=this.remove(this.start.next)),t},removeLast:function(){var t=null;return this._numNodes>0&&(t=this.remove(this.end.prev)),t},removeAll:function(){this.start.next=this.end,this.end.prev=this.start,this._numNodes=0,this._idCounter=0},each:function(t){for(var n=this.start;n.hasNext();)n=n.next,t(n)},find:function(t){for(var n=this.start,e=!1,i=null;n.hasNext()&&!e;)n=n.next,t(n)&&(i=n,e=!0);return i},map:function(t){for(var n=this.start,e=[];n.hasNext();)n=n.next,t(n)&&e.push(n);return e},push:function(t){this.addLast(t)},unshift:function(t){this._numNodes>0?this.insertBefore(this.start.next,t):this.insertBefore(this.end,t)},pop:function(){return this.removeLast()},shift:function(){return this.removeFirst()}},t.ListNode=n,t.LinkedList=e}(window);